#include <QTRSensors.h>

// Motor control pins for L298N
#define AIN1 7   // Control pin 1 for motor A
#define AIN2 8   // Control pin 2 for motor A
#define PWMA 9   // PWM speed control for motor A
#define BIN1 12  // Control pin 1 for motor B
#define BIN2 13  // Control pin 2 for motor B
#define PWMB 11  // PWM speed control for motor B
#define STBY 10  // Standby pin

// Constants for motor control
const int offsetA = 1;
const int offsetB = 1;

// QTR Sensor setup
QTRSensors qtr;
const uint8_t SensorCount = 5;
uint16_t sensorValues[SensorCount];
int threshold[SensorCount];

// PID Control variables
float Kp = 0.2;    // Start with conservative values
float Ki = 0.0001;
float Kd = 1;

float Pvalue;
float Ivalue;
float Dvalue;

boolean runningMode = false;  // Robot on/off state

uint16_t position;
int P, D, I, previousError, error;
int leftSpeed, rightSpeed;
int baseSpeed = 200;  // Base speed for the motors

void setup() {
  // Configure motor control pins
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMA, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(PWMB, OUTPUT);
  pinMode(STBY, OUTPUT);
  
  digitalWrite(STBY, HIGH); // Activate motors (not in standby)

  // Configure the sensors
  qtr.setTypeAnalog();
  qtr.setSensorPins((const uint8_t[]){A0, A1, A2, A3, A4}, SensorCount);

  delay(500);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH); // Turn on Arduino's LED to indicate calibration mode
  
  Serial.begin(9600);
  Serial.println("Starting sensor calibration...");
  
  // Sensor calibration
  for (uint16_t i = 0; i < 400; i++) {
    qtr.calibrate();
  }
  digitalWrite(LED_BUILTIN, LOW); // Turn off LED to indicate calibration complete

  // Print the calibration threshold values
  for (uint8_t i = 0; i < SensorCount; i++) {
    threshold[i] = (qtr.calibrationOn.minimum[i] + qtr.calibrationOn.maximum[i])/2;
    Serial.print(threshold[i]);
    Serial.print("  ");
  }
  Serial.println();
  Serial.println("Calibration complete");

  // Initialize PID variables
  I = 0;
  previousError = 0;
  
  // Start the robot (set to true if you want it to start immediately)
  runningMode = false;

  delay(1000);
}

void loop() {
  // Check if commands are coming from Serial
  if (Serial.available()) {
    processSerialCommands();
  }
  
  if (runningMode) {
    robot_control();
  } else {
    stopMotors();
  }
}

void robot_control() {
  // Read sensor values and calculate line position
  position = qtr.readLineBlack(sensorValues);
  error = 2000 - position;  // Center is at 2000
  
  // Handle line loss - check if all sensors read high values
  if (sensorValues[0] >= 900 && sensorValues[1] >= 900 && 
      sensorValues[2] >= 900 && sensorValues[3] >= 900 && 
      sensorValues[4] >= 900) {
    
    // Line is lost - use last known error to determine turn direction
    if (previousError > 0) {
      // Line was to the left, so turn left
      setMotorSpeeds(-180, 180);
    } else {
      // Line was to the right, so turn right
      setMotorSpeeds(180, -180);
    }
  } else {
    // Normal operation - use PID control
    PID_LineFollow(error);
  }
}

void PID_LineFollow(int error) {
  // Calculate PID components
  P = error;
  I = I + error;
  D = error - previousError;
  
  // Apply PID values with coefficients
  Pvalue = Kp * P;
  Ivalue = Ki * I;
  Dvalue = Kd * D;
  
  // Combine for final PID value
  float pidValue = Pvalue + Ivalue + Dvalue;
  previousError = error;

  // Calculate motor speeds based on PID output
  leftSpeed = baseSpeed - pidValue;
  rightSpeed = baseSpeed + pidValue;

  // Constrain speeds to valid PWM range
  leftSpeed = constrain(leftSpeed, -255, 255);
  rightSpeed = constrain(rightSpeed, -255, 255);
  
  // Apply speeds to motors
  setMotorSpeeds(leftSpeed, rightSpeed);
}

void setMotorSpeeds(int left, int right) {
  // Left motor
  if (left > 0) {
    digitalWrite(AIN1, HIGH);
    digitalWrite(AIN2, LOW);
    analogWrite(PWMA, left);
  } else {
    digitalWrite(AIN1, LOW);
    digitalWrite(AIN2, HIGH);
    analogWrite(PWMA, -left);  // Make negative value positive
  }
  
  // Right motor
  if (right > 0) {
    digitalWrite(BIN1, HIGH);
    digitalWrite(BIN2, LOW);
    analogWrite(PWMB, right);
  } else {
    digitalWrite(BIN1, LOW);
    digitalWrite(BIN2, HIGH);
    analogWrite(PWMB, -right);  // Make negative value positive
  }
}

void stopMotors() {
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, LOW);
  analogWrite(PWMA, 0);
  
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, LOW);
  analogWrite(PWMB, 0);
}

void processSerialCommands() {
  char cmd = Serial.read();
  int value;
  
  switch (cmd) {
    case 'P':  // Set Kp value
      value = Serial.parseInt();
      if (value >= 0) {
        Kp = value / 100.0;  // Divide by 100 for fine-tuning
        Serial.print("Kp set to: ");
        Serial.println(Kp);
      }
      break;
      
    case 'I':  // Set Ki value
      value = Serial.parseInt();
      if (value >= 0) {
        Ki = value / 10000.0;  // Divide by 10000 for very fine-tuning
        Serial.print("Ki set to: ");
        Serial.println(Ki);
      }
      break;
      
    case 'D':  // Set Kd value
      value = Serial.parseInt();
      if (value >= 0) {
        Kd = value / 10.0;  // Divide by 10 for fine-tuning
        Serial.print("Kd set to: ");
        Serial.println(Kd);
      }
      break;
      
    case 'S':  // Set base speed
      value = Serial.parseInt();
      if (value > 0 && value <= 255) {
        baseSpeed = value;
        Serial.print("Base speed set to: ");
        Serial.println(baseSpeed);
      }
      break;
      
    case 'R':  // Run/Stop robot
      value = Serial.parseInt();
      runningMode = (value == 1);
      Serial.print("Robot ");
      Serial.println(runningMode ? "started" : "stopped");
      break;
      
    case 'C':  // Re-calibrate sensors
      Serial.println("Recalibrating sensors...");
      digitalWrite(LED_BUILTIN, HIGH);
      for (uint16_t i = 0; i < 200; i++) {
        qtr.calibrate();
      }
      digitalWrite(LED_BUILTIN, LOW);
      Serial.println("Calibration complete");
      break;
      
    default:
      // Clear the buffer for invalid commands
      while (Serial.available() > 0) {
        Serial.read();
      }
      break;
  }
}